Index: Menu.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/env python3\r\n# -*- coding: utf-8 -*-\r\n# =============================================================================\r\n# Created By  : Bulteau Téo\r\n# Created Date: April 18 16:00:00 2021\r\n# For Kerlik, all rights reserved\r\n# =============================================================================\r\n\"\"\"The Module Has Been Build for the automation of radio frequency tests\"\"\"\r\n# =============================================================================\r\n# Imports\r\nimport tkinter as tk\r\nfrom tkinter import *\r\nfrom tkinter import ttk\r\nfrom tkinter.messagebox import *\r\n# =============================================================================\r\n\r\n\r\nclass Application(Tk):\r\n    def __init__(self):\r\n        Tk.__init__(self)\r\n        self.creer_widgets()\r\n        self.title(\"Main menu\")\r\n        self.withdraw()\r\n\r\n    def oven(self):\r\n        print(\"Oven\")\r\n        label2 = Label(self, text=\"Enter your name:\")\r\n        label2.pack(padx=0, pady=0, expand=False, fill=\"none\", side=TOP)\r\n        name = Entry(self)\r\n        name.pack(padx=0, pady=0, expand=False, fill=\"none\", side=TOP)\r\n        button4 = Button(self, text=\"Connect!\", command=lambda: print(\"you are\"))\r\n        button4.pack(padx=0, pady=0, expand=False, fill=\"none\", side=TOP)\r\n\r\n    def lfg(self):\r\n        print(\"Low frequency generator\")\r\n\r\n    def sg(self):\r\n        print(\"Signal generator\")\r\n\r\n    def osl(self):\r\n        print(\"Oscilloscope\")\r\n\r\n    def interface(self, valeur_choix):\r\n        print(\"la valeur_choix est :\", valeur_choix)\r\n        if valeur_choix == -1:\r\n            print(\"error\")\r\n            showerror(\"Error\", \"You must select a valid instrument\")\r\n        elif valeur_choix == 0:\r\n            print(\"Oven\")\r\n            self.oven()\r\n        elif valeur_choix == 1:\r\n            print(\"Low frequency generator\")\r\n            self.lfg()\r\n        elif valeur_choix == 2:\r\n            print(\"Signal generator\")\r\n            self.sg()\r\n        else:\r\n            print(\"Oscilloscope\")\r\n            self.sol()\r\n\r\n    def combo(self):  #creation of a combobox\r\n        self.geometry(\"300x200\")\r\n        labelexample = tk.Label(self, text=\"Settings\", font=\"arial\", fg=\"black\")\r\n        labelexample.pack(padx=0, pady=0, expand=False, fill=\"none\", side=TOP)\r\n        labeltop = tk.Label(self, text=\"Choose your measuring tool\")\r\n        labeltop.pack(expand=False, fill=\"none\", side=TOP)\r\n        comboexample = ttk.Combobox(self, values=[\r\n                                     \"Oven\",\r\n                                     \"Low frequency generator\",\r\n                                     \"Signal generator\",\r\n                                     \"Oscilloscope\"],\r\n                                    state=\"readonly\")\r\n        comboexample.pack(padx=50, pady=0, expand=False, fill=\"x\", side=TOP)\r\n        button3 = tk.Button(self, text=\"validate\",\r\n                            borderwidth=8, background=\"#E76145\",\r\n                            activebackground=\"green\", disabledforeground=\"grey\",\r\n                            overrelief=\"sunken\",\r\n                            command=lambda: [print(comboexample.current(),\r\n                                                   comboexample.get()), self.interface(comboexample.current())])\r\n        button3.pack(padx=30, pady=10, expand=True, fill=\"both\", side=TOP)\r\n\r\n    def creer_widgets(self):  #creation of a lobby menu\r\n        newwindow = tk.Toplevel(self)\r\n        newwindow.configure(bg=\"grey\")\r\n        newwindow.title(\"Start menu\")\r\n        newwindow.geometry('700x200')\r\n        label = tk.Label(newwindow, text=\"Menu\",)\r\n        label.pack(padx=10, pady=10, expand=True, fill=\"both\", side=TOP)\r\n        button1 = tk.Button(newwindow, text=\"Start\",\r\n                            borderwidth=8, background=\"#E76145\",\r\n                            activebackground=\"green\", cursor=\"right_ptr\", overrelief=\"sunken\",\r\n                            command=lambda: [self.combo(), self.deiconify(), newwindow.withdraw()])\r\n        button1.pack(padx=30, pady=10, expand=True, fill=\"both\", side=TOP)\r\n        button2 = tk.Button(newwindow, text=\"Quit\",\r\n                            borderwidth=8, background=\"#E76145\",\r\n                            activebackground=\"green\", cursor=\"right_ptr\", overrelief=\"sunken\",\r\n                            command=newwindow.quit)\r\n        button2.pack(padx=30, pady=10, expand=True, fill=\"both\", side=TOP)\r\n\r\n\r\n\"\"\"\r\nif __name__ == \"__main__\":\r\n    app = Application()\r\n    app.title(\"Application for the automation of radiofrequency tests\")\r\n    app.mainloop()\r\n\"\"\"\r\nApplication().mainloop()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Menu.py b/Menu.py
--- a/Menu.py	
+++ b/Menu.py	
@@ -12,6 +12,7 @@
 from tkinter import *
 from tkinter import ttk
 from tkinter.messagebox import *
+from tkinter.colorchooser import askcolor
 # =============================================================================
 
 
@@ -24,6 +25,7 @@
 
     def oven(self):
         print("Oven")
+        self.geometry("1000x500")
         label2 = Label(self, text="Enter your name:")
         label2.pack(padx=0, pady=0, expand=False, fill="none", side=TOP)
         name = Entry(self)
@@ -40,18 +42,18 @@
     def osl(self):
         print("Oscilloscope")
 
-    def interface(self, valeur_choix):
-        print("la valeur_choix est :", valeur_choix)
-        if valeur_choix == -1:
+    def interface(self, choice):
+        print("your choice is :", choice)
+        if choice == -1:
             print("error")
             showerror("Error", "You must select a valid instrument")
-        elif valeur_choix == 0:
+        elif choice == 0:
             print("Oven")
             self.oven()
-        elif valeur_choix == 1:
+        elif choice == 1:
             print("Low frequency generator")
             self.lfg()
-        elif valeur_choix == 2:
+        elif choice == 2:
             print("Signal generator")
             self.sg()
         else:
@@ -70,7 +72,7 @@
                                      "Signal generator",
                                      "Oscilloscope"],
                                     state="readonly")
-        comboexample.pack(padx=50, pady=0, expand=False, fill="x", side=TOP)
+        comboexample.pack(padx=50, pady=0, expand=False, fill="none", side=TOP)
         button3 = tk.Button(self, text="validate",
                             borderwidth=8, background="#E76145",
                             activebackground="green", disabledforeground="grey",
@@ -97,7 +99,6 @@
                             command=newwindow.quit)
         button2.pack(padx=30, pady=10, expand=True, fill="both", side=TOP)
 
-
 """
 if __name__ == "__main__":
     app = Application()
Index: Menu1.2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Menu1.2.py b/Menu1.2.py
new file mode 100644
--- /dev/null	
+++ b/Menu1.2.py	
@@ -0,0 +1,233 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+# =============================================================================
+# Created By  : Bulteau Téo
+# Created Date: April 23 16:00:00 2021
+# For Kerlik, all rights reserved
+# =============================================================================
+"""The Module Has Been Build for the automation of radio frequency tests"""
+# =============================================================================
+# Imports
+import tkinter as tk
+from tkinter import *
+from tkinter import ttk
+from tkinter.messagebox import *
+from tkinter.colorchooser import askcolor
+import Data as da
+
+
+# =============================================================================
+
+
+class Application(Tk):
+    def __init__(self):
+        Tk.__init__(self)
+        global elcolor
+        elcolor = "#E76145"
+        global size
+        size = "1200x500"
+        self.create_widgets()
+        self.title("Main menu")
+        self.withdraw()
+
+    def oven(self):
+        self.geometry(size)
+        my_oven_frame = LabelFrame(self, text="Settings of the oven")
+        my_oven_frame.grid(row=0, column=1, ipadx=40, ipady=40, padx=0, pady=0)
+        label2 = Label(my_oven_frame, text="Enter your name:")
+        label2.pack(padx=0, pady=0, expand=False, fill="none", side=TOP)
+        name = Entry(my_oven_frame)
+        name.pack(padx=0, pady=0, expand=False, fill="none", side=TOP)
+        button4 = Button(my_oven_frame, text="Connect", borderwidth=8, background=elcolor,
+                         activebackground="green", disabledforeground="grey",
+                         cursor="right_ptr",
+                         overrelief="sunken", command=lambda: print("you are " + name.get()))
+        button4.pack(padx=0, pady=0, expand=False, fill="none", side=TOP)
+        self.graphique()
+        self.scale()
+        self.data_managment()
+        self.save()
+
+    def data_managment(self):
+        my_data_managment_frame = LabelFrame(self, text="Data_managment")
+        my_data_managment_frame.grid(row=1, column=0, ipadx=40, ipady=5, padx=0, pady=0)
+        label = tk.Label(my_data_managment_frame, text="Data managment Menu")
+        label.pack()
+        button6 = tk.Button(my_data_managment_frame, text="Write what you want in the file",
+                            borderwidth=8, background=elcolor,
+                            activebackground="green", disabledforeground="grey",
+                            cursor="right_ptr",
+                            overrelief="sunken",
+                            command=lambda: da.write_file())
+        button6.pack()
+        button7 = tk.Button(my_data_managment_frame, text="Read the file",
+                            borderwidth=8, background=elcolor,
+                            activebackground="green", disabledforeground="grey",
+                            cursor="right_ptr",
+                            overrelief="sunken", command=lambda: da.read_file())
+        button7.pack()
+        button5 = tk.Button(my_data_managment_frame, text="Delete file",
+                            borderwidth=8, background=elcolor,
+                            activebackground="green", disabledforeground="grey",
+                            cursor="right_ptr",
+                            overrelief="sunken", command=lambda: da.delete_file())
+        button5.pack()
+
+    def graphique(self):
+        my_graphic_frame = LabelFrame(self, text="Graphic")
+        my_graphic_frame.grid(row=0, column=3, ipadx=40, ipady=5, padx=0, pady=0)
+        canv = Canvas(my_graphic_frame, bg="white", height=200, width=200)
+        canv.pack()
+        oval = (0, 0, 200, 200)
+        line1 = (0, 0, 200, 200)
+        line2 = (0, 200, 200, 0)
+        canv.create_oval(oval, outline="red", width=10)
+        canv.create_line(line1, fill="black", width=10)
+        canv.create_line(line2, fill="black", width=10)
+
+    def lfg(self):
+        print("Low frequency generator")
+        self.geometry(size)
+        my_lfg_frame = LabelFrame(self, text="Settings of the Low frequency generator")
+        my_lfg_frame.grid(row=0, column=1, ipadx=40, ipady=40, padx=0, pady=0)
+        self.graphique()
+
+    def sg(self):
+        print("Signal generator")
+        self.geometry(size)
+        my_sg_frame = LabelFrame(self, text="Settings of the Signal generator")
+        my_sg_frame.grid(row=0, column=1, ipadx=40, ipady=40, padx=0, pady=0)
+        self.graphique()
+
+    def osl(self):
+        print("Oscilloscope")
+        self.geometry(size)
+        my_osl_frame = LabelFrame(self, text="Settings of the Oscilloscope")
+        my_osl_frame.grid(row=0, column=1, ipadx=40, ipady=40, padx=0, pady=0)
+        self.graphique()
+
+    def interface(self, choice):
+        print("your choice is :", choice)
+        if choice == -1:
+            print("error")
+            showerror("Error", "You must select a valid instrument")
+        elif choice == 0:
+            print("Oven")
+            self.clear("Oven")
+            self.oven()
+        elif choice == 1:
+            print("Low frequency generator")
+            self.clear("Low frequency generator")
+            self.lfg()
+        elif choice == 2:
+            print("Signal generator")
+            self.clear("Signal generator")
+            self.sg()
+        else:
+            print("Oscilloscope")
+            self.clear("Oscilloscope")
+            self.osl()
+
+    def combo(self, value):  # creation of a combobox
+        my_combo_frame = LabelFrame(self, text="Choice of instrument")
+        my_combo_frame.grid(row=0, column=0, ipadx=40, ipady=40, padx=0, pady=0)
+        labelexample = tk.Label(my_combo_frame, text="Settings", font="arial", fg="black")
+        labelexample.pack(padx=0, pady=0, expand=False, fill="none", side=TOP)
+        labeltop = tk.Label(my_combo_frame, text="Choose your measuring tool")
+        labeltop.pack(expand=False, fill="none", side=TOP)
+        comboexample = ttk.Combobox(my_combo_frame, values=[
+            "Oven",
+            "Low frequency generator",
+            "Signal generator",
+            "Oscilloscope"],
+                                    state="readonly")
+        comboexample.set(value)
+        comboexample.pack(padx=50, pady=0, expand=False, fill="x", side=TOP)
+        button3 = tk.Button(my_combo_frame, text="validate",
+                            borderwidth=8, background=elcolor,
+                            activebackground="green", disabledforeground="grey",
+                            cursor="right_ptr",
+                            overrelief="sunken",
+                            command=lambda: [print(comboexample.current(),
+                                                   comboexample.get()),
+                                             self.interface(comboexample.current())])
+        button3.pack(padx=30, pady=10, expand=True, fill="both", side=TOP)
+
+    def create_widgets(self):  # creation of a lobby menu
+        newwindow = tk.Toplevel(self)
+        newwindow.configure(bg="grey")
+        newwindow.title("Start menu")
+        newwindow.geometry('700x200')
+        label = tk.Label(newwindow, text="Menu", )
+        label.pack(padx=10, pady=10, expand=True, fill="both", side=TOP)
+        button1 = tk.Button(newwindow, text="Start",
+                            borderwidth=8, background=elcolor,
+                            activebackground="green", cursor="right_ptr", overrelief="sunken",
+                            command=lambda: [self.combo("--choose your instrument here--"),
+                                             self.deiconify(), newwindow.withdraw()])
+        button1.pack(padx=30, pady=10, expand=True, fill="both", side=TOP)
+        button2 = tk.Button(newwindow, text="Quit",
+                            borderwidth=8, background=elcolor,
+                            activebackground="green", cursor="right_ptr", overrelief="sunken",
+                            command=newwindow.quit)
+        button2.pack(padx=30, pady=10, expand=True, fill="both", side=TOP)
+        button_settings = tk.Button(newwindow, text="color", overrelief="sunken", bitmap="info", cursor="right_ptr",
+                                    command=lambda: (self.dothewhat(newwindow)))
+        button_settings.pack(padx=0, pady=0, expand=False, fill="none", side=LEFT)
+
+    def dothewhat(self, newwindow):
+        color = askcolor()
+        global elcolor
+        elcolor = color[1]
+        newwindow.destroy()
+        self.create_widgets()
+
+    def scale(self):
+        v = IntVar()
+        my_scale_frame = LabelFrame(self, text="A scale")
+        my_scale_frame.grid(row=0, column=2, ipadx=40, ipady=40, padx=0, pady=0)
+        scale1 = Scale(my_scale_frame, orient='vertical', variable=v, troughcolor=elcolor, from_=0, to=100,
+                       resolution=1, tickinterval=25, length=100, command=0,
+                       label='Power', state="active")
+        scale1.pack(side=LEFT)
+        power = Entry(my_scale_frame, validate="all", textvariable=v,
+                      invalidcommand=lambda: showerror("Error", "Therre is an error"))
+        power.pack(padx=0, pady=0, expand=False, fill="none", side=TOP)
+        label4 = tk.Label(my_scale_frame, text="Menu", textvariable=v)
+        label4.pack(padx=0, pady=0, expand=True, fill="none", side=TOP)
+
+    def clear(self, get_tilte):
+        print("clear")
+        self.destroy()
+        Tk.__init__(self)
+        self.title(get_tilte + " menu")
+        self.combo(get_tilte)
+
+    def save(self):
+        my_save_frame = LabelFrame(self, text="Save menu")
+        my_save_frame.grid(row=1, column=1, ipadx=40, ipady=40, padx=0, pady=0)
+        button9 = tk.Button(my_save_frame, text="Save",
+                            borderwidth=8, background=elcolor,
+                            activebackground="green", cursor="right_ptr", overrelief="sunken",
+                            command=my_save_frame.quit)
+        button9.pack(padx=30, pady=10, expand=True, fill="both", side=TOP)
+
+        button8 = tk.Button(my_save_frame, text="Quit",
+                            borderwidth=8, background=elcolor,
+                            activebackground="green", cursor="right_ptr", overrelief="sunken",
+                            command=lambda: (self.leving()))
+        button8.pack(padx=30, pady=10, expand=True, fill="both", side=TOP)
+
+    def leving(self):
+        if askyesno('Warning', 'Are you sure you want to do exit ?'):
+            if askyesno('Warning', 'your data is not saved, are you sure you want to continue'):
+                self.quit()
+
+
+"""
+if __name__ == "__main__":
+    app = Application()
+    app.title("Application for the automation of radiofrequency tests")
+    app.mainloop()
+"""
+Application().mainloop()
Index: Data.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Data.py b/Data.py
new file mode 100644
--- /dev/null	
+++ b/Data.py	
@@ -0,0 +1,56 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+# =============================================================================
+# Created By  : Bulteau Téo
+# Created Date: April 23 16:15:00 2021
+# For Kerlik, all rights reserved
+# =============================================================================
+"""The Module Has Been Build for the automation of radio frequency tests"""
+# =============================================================================
+# Imports
+import os
+from tkinter.messagebox import *
+# =============================================================================
+
+
+def file():
+    # text to implement in a file
+    print("I am in the file")
+    presentation = "My name is Teo.\nI have 20 year old"
+    # open a new file
+    with open("Data.txt", "w+") as file:
+        file.write(presentation)  # I write in the file
+        file.seek(0)  # Replace cursor at start of file
+        print(file.read())  # read all the file
+        file.seek(3)  # replace the cursor at the 4th byte of the file
+        print(file.read(9))  # read 9 character from 4th
+        file.seek(0)  # Replace cursor at start of file
+        print(file.readline())  # read a line of the file
+
+
+def delete_file():
+    try :
+        os.remove("Data.txt")
+        print("File successfully deleted")
+        showinfo("info", "File successfully deleted")
+    except:
+        print("The file does not exist")
+        showerror("Error", "The file does not exist")
+
+
+def write_file():
+    text = input("What do you want to write ?")
+    with open("Data.txt", "w") as file:
+        file.write(text)
+
+
+def read_file():
+    try:
+        file = open("Data.txt", "r")
+        print(file.read())
+    except:
+        print("The file does not exist")
+        showerror("Error", "The file does not exist")
+    finally:
+        print("The program has been correctly ended")
+        showinfo("info","The program has been correctly ended")
Index: Menu1.1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Menu1.1.py b/Menu1.1.py
new file mode 100644
--- /dev/null	
+++ b/Menu1.1.py	
@@ -0,0 +1,178 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+# =============================================================================
+# Created By  : Bulteau Téo
+# Created Date: April 23 14:00:00 2021
+# For Kerlik, all rights reserved
+# =============================================================================
+"""The Module Has Been Build for the automation of radio frequency tests"""
+# =============================================================================
+# Imports
+import tkinter as tk
+from tkinter import *
+from tkinter import ttk
+from tkinter.messagebox import *
+from tkinter.colorchooser import askcolor
+
+
+# =============================================================================
+
+
+class Application(Tk):
+    def __init__(self):
+        Tk.__init__(self)
+        global elcolor
+        elcolor = "#E76145"
+        global size
+        size = "1200x500"
+        self.create_widgets()
+        self.title("Main menu")
+        self.withdraw()
+
+    def oven(self):
+        self.geometry(size)
+        #self.tilte("Oven menu")
+        my_oven_frame = LabelFrame(self, text="Settings of the oven")
+        my_oven_frame.grid(row=0, column=1, ipadx=40, ipady=40, padx=0, pady=0)
+        label2 = Label(my_oven_frame, text="Enter your name:")
+        label2.pack(padx=0, pady=0, expand=False, fill="none", side=TOP)
+        name = Entry(my_oven_frame)
+        name.pack(padx=0, pady=0, expand=False, fill="none", side=TOP)
+        button4 = Button(my_oven_frame, text="Connect", borderwidth=8, background=elcolor,
+                         activebackground="green", disabledforeground="grey",
+                         cursor="right_ptr",
+                         overrelief="sunken", command=lambda: print("you are " + name.get()))
+        button4.pack(padx=0, pady=0, expand=False, fill="none", side=TOP)
+        self.graphique()
+        self.scale()
+
+    def graphique(self):
+        my_graphic_frame = LabelFrame(self, text="Graphic")
+        my_graphic_frame.grid(row=0, column=3, ipadx=40, ipady=5, padx=0, pady=0)
+        canv = Canvas(my_graphic_frame, bg="white", height=200, width=200)
+        canv.pack()
+        oval = (0, 0, 200, 200)
+        line1 = (0, 0, 200, 200)
+        line2 = (0, 200, 200, 0)
+        canv.create_oval(oval, outline="red", width=10)
+        canv.create_line(line1, fill="black", width=10)
+        canv.create_line(line2, fill="black", width=10)
+
+    def lfg(self):
+        print("Low frequency generator")
+        self.geometry(size)
+        my_lfg_frame = LabelFrame(self, text="Settings of the Low frequency generator")
+        my_lfg_frame.grid(row=0, column=1, ipadx=40, ipady=40, padx=0, pady=0)
+        self.graphique()
+
+    def sg(self):
+        print("Signal generator")
+        self.geometry(size)
+        my_sg_frame = LabelFrame(self, text="Settings of the Signal generator")
+        my_sg_frame.grid(row=0, column=1, ipadx=40, ipady=40, padx=0, pady=0)
+        self.graphique()
+
+    def osl(self):
+        print("Oscilloscope")
+        self.geometry(size)
+        my_osl_frame = LabelFrame(self, text="Settings of the Oscilloscope")
+        my_osl_frame.grid(row=0, column=1, ipadx=40, ipady=40, padx=0, pady=0)
+        self.graphique()
+
+    def interface(self, choice):
+        print("your choice is :", choice)
+        if choice == -1:
+            print("error")
+            showerror("Error", "You must select a valid instrument")
+        elif choice == 0:
+            print("Oven")
+            self.clear("Oven")
+            self.oven()
+        elif choice == 1:
+            print("Low frequency generator")
+            self.clear("Low frequency generator")
+            self.lfg()
+        elif choice == 2:
+            print("Signal generator")
+            self.clear("Signal generator")
+            self.sg()
+        else:
+            print("Oscilloscope")
+            self.clear("Oscilloscope")
+            self.osl()
+
+    def combo(self, value):  # creation of a combobox
+        my_combo_frame = LabelFrame(self, text="Choice of instrument")
+        my_combo_frame.grid(row=0, column=0, ipadx=40, ipady=40, padx=0, pady=0)
+        labelexample = tk.Label(my_combo_frame, text="Settings", font="arial", fg="black")
+        labelexample.pack(padx=0, pady=0, expand=False, fill="none", side=TOP)
+        labeltop = tk.Label(my_combo_frame, text="Choose your measuring tool")
+        labeltop.pack(expand=False, fill="none", side=TOP)
+        comboexample = ttk.Combobox(my_combo_frame, values=[
+            "Oven",
+            "Low frequency generator",
+            "Signal generator",
+            "Oscilloscope"],
+                                    state="readonly")
+        comboexample.set(value)
+        comboexample.pack(padx=50, pady=0, expand=False, fill="x", side=TOP)
+        button3 = tk.Button(my_combo_frame, text="validate",
+                            borderwidth=8, background=elcolor,
+                            activebackground="green", disabledforeground="grey",
+                            cursor="right_ptr",
+                            overrelief="sunken",
+                            command=lambda: [print(comboexample.current(),
+                                                   comboexample.get()),
+                                             self.interface(comboexample.current())])
+        button3.pack(padx=30, pady=10, expand=True, fill="both", side=TOP)
+
+    def create_widgets(self):  # creation of a lobby menu
+        newwindow = tk.Toplevel(self)
+        newwindow.configure(bg="grey")
+        newwindow.title("Start menu")
+        newwindow.geometry('700x200')
+        label = tk.Label(newwindow, text="Menu", )
+        label.pack(padx=10, pady=10, expand=True, fill="both", side=TOP)
+        button1 = tk.Button(newwindow, text="Start",
+                            borderwidth=8, background=elcolor,
+                            activebackground="green", cursor="right_ptr", overrelief="sunken",
+                            command=lambda: [self.combo("--choose your instrument here--"), self.deiconify(), newwindow.withdraw()])
+        button1.pack(padx=30, pady=10, expand=True, fill="both", side=TOP)
+        button2 = tk.Button(newwindow, text="Quit",
+                            borderwidth=8, background=elcolor,
+                            activebackground="green", cursor="right_ptr", overrelief="sunken",
+                            command=newwindow.quit)
+        button2.pack(padx=30, pady=10, expand=True, fill="both", side=TOP)
+        button_settings = tk.Button(newwindow, text="color", overrelief="sunken", bitmap="info", cursor="right_ptr",
+                                    command=lambda: (self.dothewhat(newwindow)))
+        button_settings.pack(padx=0, pady=0, expand=False, fill="none", side=LEFT)
+
+    def dothewhat(self, newwindow):
+        color = askcolor()
+        global elcolor
+        elcolor = color[1]
+        newwindow.destroy()
+        self.create_widgets()
+
+    def scale(self):
+        my_scale_frame = LabelFrame(self, text="A scale")
+        my_scale_frame.grid(row=0, column=2, ipadx=40, ipady=40, padx=0, pady=0)
+        top = Scale(my_scale_frame, orient='vertical', from_=0, to=100,
+                    resolution=5, tickinterval=25, length=100,
+                    label='Puissance', state="active")
+        top.pack(side=LEFT)
+
+    def clear(self, get_tilte):
+        print("clear")
+        self.destroy()
+        Tk.__init__(self)
+        self.title(get_tilte + " menu")
+        self.combo(get_tilte)
+
+"""
+if __name__ == "__main__":
+    app = Application()
+    app.title("Application for the automation of radiofrequency tests")
+    app.mainloop()
+"""
+Application().mainloop()
